{"ast":null,"code":"import { API_URL } from 'src/environment/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./api.service\";\nexport class AuthService {\n  constructor(http, apiService) {\n    this.http = http;\n    this.apiService = apiService;\n    this.myHeaders = new Headers();\n  }\n  signup(username, email, password) {\n    return this.http.post(API_URL + '/users', {\n      email,\n      password\n    }).subscribe(data => {\n      console.log(data);\n      //this.apiService.setToken(data['token']);\n    });\n    // return this.http.post(API_URL + '/products').subscribe((data) => {\n    //   this.sendAllProducts(data);\n    // });\n    // return true;\n  }\n\n  login(username, password) {\n    this.myHeaders.append('Content-Type', 'application/json');\n    var raw = JSON.stringify({\n      \"username\": username,\n      \"password\": password\n    });\n    this.requestOptions = {\n      method: 'POST',\n      headers: this.myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n    fetch(API_URL + '/auth/signin', this.requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n    return this.http.post(API_URL + '/auth/signin', {\n      \"username\": username,\n      \"password\": password\n    }).subscribe(data => {\n      console.log(data);\n    });\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  loggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ApiService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,OAAO,QAAQ,6BAA6B;;;;AAKrD,OAAM,MAAOC,WAAW;EAItBC,YACUC,IAAgB,EAChBC,UAAsB;IADtB,SAAI,GAAJD,IAAI;IACJ,eAAU,GAAVC,UAAU;IALpB,cAAS,GAAG,IAAIC,OAAO,EAAE;EAMrB;EAEJC,MAAM,CAACC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB;IACtD,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAACV,OAAO,GAAG,QAAQ,EAAE;MAAEQ,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACE,SAAS,CAAEC,IAAI,IAAI;MAChFC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MAEjB;IACF,CAAC,CAAC;IAEF;IACA;IACA;IACA;EACF;;EAEAG,KAAK,CAACR,QAAgB,EAAEE,QAAgB;IACtC,IAAI,CAACO,SAAS,CAACC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC;IAEzD,IAAIC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC;MACvB,UAAU,EAAEb,QAAQ;MACpB,UAAU,EAAEE;KACb,CAAC;IAEF,IAAI,CAACY,cAAc,GAAG;MACpBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE,IAAI,CAACP,SAAS;MACvBQ,IAAI,EAAEN,GAAG;MACTO,QAAQ,EAAE;KACX;IAEDC,KAAK,CAAC1B,OAAO,GAAG,cAAc,EAAE,IAAI,CAACqB,cAAc,CAAC,CACjDM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAIjB,OAAO,CAACC,GAAG,CAACgB,MAAM,CAAC,CAAC,CACnCC,KAAK,CAACC,KAAK,IAAInB,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEkB,KAAK,CAAC,CAAC;IAG9C,OAAO,IAAI,CAAC7B,IAAI,CAACO,IAAI,CAACV,OAAO,GAAG,cAAc,EAAE;MAAE,UAAU,EAAEO,QAAQ;MAAE,UAAU,EAAEE;IAAQ,CAAE,CAAC,CAACE,SAAS,CAAEC,IAAI,IAAI;MACjHC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IAEnB,CAAC,CAAC;EACJ;EAEAqB,MAAM;IACJC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,QAAQ;IACN,OAAO,CAAC,CAACF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAC,QAAQ,CAACC,KAAa;IACpBL,YAAY,CAACM,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;EACtC;EAEAE,QAAQ;IACN,OAAOP,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;EAAC;qBA/DUpC,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAyC,SAAXzC,WAAW;IAAA0C,YAFV;EAAM","names":["API_URL","AuthService","constructor","http","apiService","Headers","signup","username","email","password","post","subscribe","data","console","log","login","myHeaders","append","raw","JSON","stringify","requestOptions","method","headers","body","redirect","fetch","then","response","text","result","catch","error","logout","localStorage","removeItem","loggedIn","getItem","setToken","token","setItem","getToken","factory","providedIn"],"sourceRoot":"","sources":["/Users/leoterras/Desktop/ApiMaven/ApiMaven-FrontEnd/src/app/services/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { ApiService } from './api.service';\nimport { Injectable } from '@angular/core';\nimport { API_URL } from 'src/environment/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  myHeaders = new Headers();\n  requestOptions: any;\n\n  constructor(\n    private http: HttpClient,\n    private apiService: ApiService\n  ) { }\n\n  signup(username: string, email: string, password: string) {\n    return this.http.post(API_URL + '/users', { email, password }).subscribe((data) => {\n      console.log(data);\n\n      //this.apiService.setToken(data['token']);\n    });\n\n    // return this.http.post(API_URL + '/products').subscribe((data) => {\n    //   this.sendAllProducts(data);\n    // });\n    // return true;\n  }\n\n  login(username: string, password: string) {\n    this.myHeaders.append('Content-Type', 'application/json');\n\n    var raw = JSON.stringify({\n      \"username\": username,\n      \"password\": password\n    })\n\n    this.requestOptions = {\n      method: 'POST',\n      headers: this.myHeaders,\n      body: raw,\n      redirect: 'follow'\n    }\n\n    fetch(API_URL + '/auth/signin', this.requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n\n\n    return this.http.post(API_URL + '/auth/signin', { \"username\": username, \"password\": password }).subscribe((data) => {\n      console.log(data);\n\n    });\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  loggedIn() {\n    return !!localStorage.getItem('token');\n  }\n\n  setToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}