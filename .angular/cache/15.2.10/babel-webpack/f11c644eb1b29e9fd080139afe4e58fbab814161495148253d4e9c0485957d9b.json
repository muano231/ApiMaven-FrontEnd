{"ast":null,"code":"import { API_URL } from 'src/environment/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.myHeaders = new Headers();\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n  }\n  setLoggedIn(value) {\n    this.isLoggedInSubject.next(value);\n  }\n  signup(username, email, password) {\n    return this.http.post(API_URL + '/auth/signup', {\n      username,\n      email,\n      password\n    }).subscribe(data => {\n      console.log(data);\n      //this.login(username, password);\n    }, error => {\n      console.log(error);\n    });\n  }\n  login(username, password) {\n    return this.http.post(API_URL + '/auth/signin', {\n      username,\n      password\n    }).subscribe(data => {\n      console.log(data);\n      this.setToken(data.accessToken);\n    }, error => {\n      console.log(error);\n    });\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  loggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n    this.router.navigate(['/']);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,6BAA6B;AAErD,SAASC,eAAe,QAAoB,MAAM;;;;AAKlD,OAAM,MAAOC,WAAW;EAOtBC,YACUC,IAAgB,EAChBC,MAAc;IADd,SAAI,GAAJD,IAAI;IACJ,WAAM,GAANC,MAAM;IARhB,cAAS,GAAG,IAAIC,OAAO,EAAE;IAEjB,sBAAiB,GAA6B,IAAIL,eAAe,CAAU,KAAK,CAAC;IAClF,gBAAW,GAAwB,IAAI,CAACM,iBAAiB,CAACC,YAAY,EAAE;EAM3E;EAEJC,WAAW,CAACC,KAAc;IACxB,IAAI,CAACH,iBAAiB,CAACI,IAAI,CAACD,KAAK,CAAC;EACpC;EAEAE,MAAM,CAACC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB;IACtD,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAChB,OAAO,GAAG,cAAc,EAAE;MAAEa,QAAQ;MAAEC,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACE,SAAS,CACrFC,IAAS,IAAI;MACZC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB;IACF,CAAC,EAAGG,KAAK,IAAI;MACXF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB,CAAC,CACF;EACH;EAEAC,KAAK,CAACT,QAAgB,EAAEE,QAAgB;IACtC,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAChB,OAAO,GAAG,cAAc,EAAE;MAAEa,QAAQ;MAAEE;IAAQ,CAAE,CAAC,CAACE,SAAS,CAC9EC,IAAS,IAAI;MACZC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAI,CAACK,QAAQ,CAACL,IAAI,CAACM,WAAW,CAAC;IACjC,CAAC,EAAGH,KAAK,IAAI;MACXF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB,CAAC,CACF;EACH;EAEAI,MAAM;IACJC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,QAAQ;IACN,OAAO,CAAC,CAACF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAN,QAAQ,CAACO,KAAa;IACpBJ,YAAY,CAACK,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;IACpC,IAAI,CAACzB,MAAM,CAAC2B,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EAEAC,QAAQ;IACN,OAAOP,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;EAAC;qBArDU3B,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAgC,SAAXhC,WAAW;IAAAiC,YAFV;EAAM","names":["API_URL","BehaviorSubject","AuthService","constructor","http","router","Headers","isLoggedInSubject","asObservable","setLoggedIn","value","next","signup","username","email","password","post","subscribe","data","console","log","error","login","setToken","accessToken","logout","localStorage","removeItem","loggedIn","getItem","token","setItem","navigate","getToken","factory","providedIn"],"sourceRoot":"","sources":["/Users/leoterras/Desktop/ApiMaven/ApiMaven-FrontEnd/src/app/services/auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { API_URL } from 'src/environment/environment';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  myHeaders = new Headers();\n  requestOptions: any;\n  private isLoggedInSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public isLoggedIn$: Observable<boolean> = this.isLoggedInSubject.asObservable();\n\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) { }\n\n  setLoggedIn(value: boolean): void {\n    this.isLoggedInSubject.next(value);\n  }\n\n  signup(username: string, email: string, password: string) {\n    return this.http.post(API_URL + '/auth/signup', { username, email, password }).subscribe(\n      (data: any) => {\n        console.log(data);\n        //this.login(username, password);\n      }, (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  login(username: string, password: string) {\n    return this.http.post(API_URL + '/auth/signin', { username, password }).subscribe(\n      (data: any) => {\n        console.log(data);\n        this.setToken(data.accessToken);\n      }, (error) => {\n        console.log(error);\n      }\n    );\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n\n  loggedIn() {\n    return !!localStorage.getItem('token');\n  }\n\n  setToken(token: string) {\n    localStorage.setItem('token', token);\n    this.router.navigate(['/']);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}