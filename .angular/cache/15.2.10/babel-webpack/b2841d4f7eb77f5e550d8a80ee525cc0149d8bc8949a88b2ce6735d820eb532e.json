{"ast":null,"code":"import _asyncToGenerator from \"/Users/leoterras/Desktop/ApiMaven/ApiMaven-FrontEnd/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nexport class RegisterComponent {\n  constructor(formBuilder, authService) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.registerForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.registerForm.invalid) return alert(\"tous les champs doivent être saisis\");\n      if (_this.registerForm.value.password == _this.registerForm.value.confirmPassword) {\n        _this.authService.signup(_this.registerForm.value.username, _this.registerForm.value.email, _this.registerForm.value.password);\n      } else {\n        return alert(\"Les mots de passe ne sont pas identiques\");\n      }\n    })();\n  }\n  static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 28,\n    vars: 2,\n    consts: [[3, \"formGroup\", \"ngSubmit\"], [\"for\", \"username\"], [\"type\", \"text\", \"formControlName\", \"username\", \"required\", \"\"], [\"type\", \"email\", \"formControlName\", \"email\", \"required\", \"\"], [\"for\", \"password\"], [\"type\", \"password\", \"formControlName\", \"password\", \"required\", \"\"], [\"for\", \"confirmPassword\"], [\"type\", \"password\", \"formControlName\", \"confirmPassword\", \"required\", \"\"], [\"type\", \"submit\", 3, \"disabled\"], [\"routerLink\", \"/signin\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\")(1, \"div\")(2, \"h1\");\n        i0.ɵɵtext(3, \"Cr\\u00E9er un compte\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\")(5, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(6, \"div\")(7, \"label\", 1);\n        i0.ɵɵtext(8, \"Nom d'utilisateur\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\")(11, \"label\", 1);\n        i0.ɵɵtext(12, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\")(15, \"label\", 4);\n        i0.ɵɵtext(16, \"Mot de passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\")(19, \"label\", 6);\n        i0.ɵɵtext(20, \"Confimer mot de passe\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"input\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"div\")(23, \"button\", 8);\n        i0.ɵɵtext(24, \"Envoyer\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(25, \"div\")(26, \"a\", 9);\n        i0.ɵɵtext(27, \"Se connecter\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n      }\n    },\n    dependencies: [i3.RouterLink, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":";AACA,SAAsBA,UAAU,QAAQ,gBAAgB;;;;;AAQxD,OAAM,MAAOC,iBAAiB;EAG5BC,YACUC,WAAwB,EACxBC,WAAwB;IADxB,gBAAW,GAAXD,WAAW;IACX,gBAAW,GAAXC,WAAW;IAEnB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACzCC,QAAQ,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MACnCC,KAAK,EAAE,CAAC,EAAE,EAAET,UAAU,CAACQ,QAAQ,CAAC;MAChCE,QAAQ,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACQ,QAAQ,CAAC;MACnCG,eAAe,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACQ,QAAQ;KAC1C,CAAC;EACJ;EAEMI,QAAQ;IAAA;IAAA;MACZ,IAAI,KAAI,CAACP,YAAY,CAACQ,OAAO,EAAE,OAAOC,KAAK,CAAC,qCAAqC,CAAC;MAElF,IAAI,KAAI,CAACT,YAAY,CAACU,KAAK,CAACL,QAAQ,IAAI,KAAI,CAACL,YAAY,CAACU,KAAK,CAACJ,eAAe,EAAE;QAC/E,KAAI,CAACP,WAAW,CAACY,MAAM,CAAC,KAAI,CAACX,YAAY,CAACU,KAAK,CAACR,QAAQ,EAAE,KAAI,CAACF,YAAY,CAACU,KAAK,CAACN,KAAK,EAAE,KAAI,CAACJ,YAAY,CAACU,KAAK,CAACL,QAAQ,CAAC;OAC3H,MAAM;QACL,OAAOI,KAAK,CAAC,0CAA0C,CAAC;;IACzD;EACH;EAAC;qBAvBUb,iBAAiB;EAAA;EAAA;UAAjBA,iBAAiB;IAAAgB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCT9BC,2BAAK;QAEOA,oCAAe;QAAAA,iBAAK;QAE5BA,2BAAK;QAEgCA;UAAA,OAAYC,cAAU;QAAA,EAAC;QACpDD,2BAAK;QACqBA,iCAAiB;QAAAA,iBAAQ;QAC/CA,2BAAuD;QAC3DA,iBAAM;QACNA,4BAAK;QACqBA,sBAAK;QAAAA,iBAAQ;QACnCA,4BAAqD;QACzDA,iBAAM;QACNA,4BAAK;QACqBA,6BAAY;QAAAA,iBAAQ;QAC1CA,4BAA2D;QAC/DA,iBAAM;QACNA,4BAAK;QAC4BA,sCAAqB;QAAAA,iBAAQ;QAC1DA,4BAAkE;QACtEA,iBAAM;QACNA,4BAAK;QACuDA,wBAAO;QAAAA,iBAAS;QAIpFA,4BAAK;QACuBA,6BAAY;QAAAA,iBAAI;;;QAvBlCA,eAA0B;QAA1BA,4CAA0B;QAkBFA,gBAAiC;QAAjCA,mDAAiC","names":["Validators","RegisterComponent","constructor","formBuilder","authService","registerForm","group","username","required","email","password","confirmPassword","onSubmit","invalid","alert","value","signup","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/leoterras/Desktop/ApiMaven/ApiMaven-FrontEnd/src/app/components/register/register.component.ts","/Users/leoterras/Desktop/ApiMaven/ApiMaven-FrontEnd/src/app/components/register/register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent {\n  registerForm: any;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService\n  ) {\n    this.registerForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      email: ['', Validators.required],\n      password: ['', Validators.required],\n      confirmPassword: ['', Validators.required]\n    })\n  }\n\n  async onSubmit(): Promise<void> {\n    if (this.registerForm.invalid) return alert(\"tous les champs doivent être saisis\");\n\n    if (this.registerForm.value.password == this.registerForm.value.confirmPassword) {\n      this.authService.signup(this.registerForm.value.username, this.registerForm.value.email, this.registerForm.value.password);\n    } else {\n      return alert(\"Les mots de passe ne sont pas identiques\");\n    }\n  }\n\n}\n","<div>\n    <div>\n        <h1>Créer un compte</h1>\n    </div>\n    <div>\n        <!-- <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\"> -->\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n            <div>\n                <label for=\"username\">Nom d'utilisateur</label>\n                <input type=\"text\" formControlName=\"username\" required>\n            </div>\n            <div>\n                <label for=\"username\">Email</label>\n                <input type=\"email\" formControlName=\"email\" required>\n            </div>\n            <div>\n                <label for=\"password\">Mot de passe</label>\n                <input type=\"password\" formControlName=\"password\" required>\n            </div>\n            <div>\n                <label for=\"confirmPassword\">Confimer mot de passe</label>\n                <input type=\"password\" formControlName=\"confirmPassword\" required>\n            </div>\n            <div>\n                <button type=\"submit\" [disabled]=\"registerForm.invalid\">Envoyer</button>\n            </div>\n        </form>\n    </div>\n    <div>\n        <a routerLink=\"/signin\">Se connecter</a>\n    </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}