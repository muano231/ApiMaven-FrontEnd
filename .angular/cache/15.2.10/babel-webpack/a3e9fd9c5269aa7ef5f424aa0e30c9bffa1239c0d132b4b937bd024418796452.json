{"ast":null,"code":"import { API_URL } from 'src/environment/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/services/auth.service\";\nexport class OrderService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.usersOrdersSubject = new BehaviorSubject([]);\n    this.usersOrders$ = this.usersOrdersSubject.asObservable();\n    this.usersOrderSubject = new BehaviorSubject([]);\n    this.usersOrder$ = this.usersOrderSubject.asObservable();\n    this.user_id = JSON.parse(localStorage.getItem('user')).id;\n    this.user_token = this.authService.getToken();\n  }\n  getOrders() {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n    return this.http.get(`${API_URL}/users/${this.user_id}`, {\n      headers\n    }).subscribe(data => {\n      const user_orders = [];\n      data.orders.forEach(order => {\n        user_orders.push(order);\n      });\n      this.setUsersOrders(user_orders);\n      return user_orders; // Vous pouvez ajuster cela en fonction de votre logique\n    }, error => {\n      console.error('Erreur lors de la récupération des commandes :', error);\n      return of([]); // Renvoie un tableau vide en cas d'erreur\n    });\n  }\n\n  setUsersOrders(value) {\n    this.usersOrdersSubject.next(value);\n  }\n  getOrder(id) {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n    return this.http.get(`${API_URL}/users/${this.user_id}/orders/${id}`, {\n      headers\n    }).subscribe(data => {\n      console.log(data);\n      const user_order = data;\n      this.setUsersOrder(user_order);\n      return user_order; // Vous pouvez ajuster cela en fonction de votre logique\n    }, error => {\n      console.error('Erreur lors de la sélection de la commande :', error);\n      return of(null); // Renvoie null en cas d'erreur\n    });\n  }\n\n  setUsersOrder(value) {\n    this.usersOrderSubject.next(value);\n  }\n  static #_ = this.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,OAAO,QAAQ,6BAA6B;AACrD,SAAqBC,WAAW,QAA0B,sBAAsB;AAChF,SAASC,eAAe,EAA+BC,EAAE,QAAQ,MAAM;;;;AAQvE,OAAM,MAAOC,YAAY;EAQvBC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,SAAI,GAAJD,IAAI;IACJ,gBAAW,GAAXC,WAAW;IATb,uBAAkB,GAAyB,IAAIL,eAAe,CAAM,EAAE,CAAC;IACxE,iBAAY,GAAoB,IAAI,CAACM,kBAAkB,CAACC,YAAY,EAAE;IACrE,sBAAiB,GAAyB,IAAIP,eAAe,CAAM,EAAE,CAAC;IACvE,gBAAW,GAAoB,IAAI,CAACQ,iBAAiB,CAACD,YAAY,EAAE;IAQzE,IAAI,CAACE,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAW,CAAC,CAACC,EAAE;IACpE,IAAI,CAACC,UAAU,GAAG,IAAI,CAACV,WAAW,CAACW,QAAQ,EAAY;EACzD;EAEAC,SAAS;IACP,MAAMC,OAAO,GAAG,IAAInB,WAAW,EAAE,CAACoB,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACJ,UAAU,EAAE,CAAC;IACnF,OAAO,IAAI,CAACX,IAAI,CAACgB,GAAG,CAAC,GAAGtB,OAAO,UAAU,IAAI,CAACW,OAAO,EAAE,EAAE;MAAES;IAAO,CAAE,CAAC,CAACG,SAAS,CAC5EC,IAAS,IAAI;MACZ,MAAMC,WAAW,GAAY,EAAE;MAE/BD,IAAI,CAACE,MAAM,CAACC,OAAO,CAAEC,KAAU,IAAI;QACjCH,WAAW,CAACI,IAAI,CAACD,KAAK,CAAC;MACzB,CAAC,CAAC;MAEF,IAAI,CAACE,cAAc,CAACL,WAAW,CAAC;MAEhC,OAAOA,WAAW,CAAC,CAAC;IACtB,CAAC,EACAM,KAAU,IAAI;MACbC,OAAO,CAACD,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;MACtE,OAAO5B,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACjB,CAAC,CACF;EACH;;EAEA2B,cAAc,CAACG,KAAU;IACvB,IAAI,CAACzB,kBAAkB,CAAC0B,IAAI,CAACD,KAAK,CAAC;EACrC;EAEAE,QAAQ,CAACnB,EAAU;IACjB,MAAMI,OAAO,GAAG,IAAInB,WAAW,EAAE,CAACoB,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACJ,UAAU,EAAE,CAAC;IACnF,OAAO,IAAI,CAACX,IAAI,CAACgB,GAAG,CAAC,GAAGtB,OAAO,UAAU,IAAI,CAACW,OAAO,WAAWK,EAAE,EAAE,EAAE;MAAEI;IAAO,CAAE,CAAC,CAACG,SAAS,CACzFC,IAAS,IAAI;MACZQ,OAAO,CAACI,GAAG,CAACZ,IAAI,CAAC;MACjB,MAAMa,UAAU,GAAUb,IAAI;MAE9B,IAAI,CAACc,aAAa,CAACD,UAAU,CAAC;MAE9B,OAAOA,UAAU,CAAC,CAAC;IACrB,CAAC,EACAN,KAAU,IAAI;MACbC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;MACpE,OAAO5B,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;IACnB,CAAC,CACF;EACH;;EAEAmC,aAAa,CAACL,KAAU;IACtB,IAAI,CAACvB,iBAAiB,CAACwB,IAAI,CAACD,KAAK,CAAC;EACpC;EAAC;qBA7DU7B,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAmC,SAAZnC,YAAY;IAAAoC,YAFX;EAAM","names":["API_URL","HttpHeaders","BehaviorSubject","of","OrderService","constructor","http","authService","usersOrdersSubject","asObservable","usersOrderSubject","user_id","JSON","parse","localStorage","getItem","id","user_token","getToken","getOrders","headers","set","get","subscribe","data","user_orders","orders","forEach","order","push","setUsersOrders","error","console","value","next","getOrder","log","user_order","setUsersOrder","factory","providedIn"],"sourceRoot":"","sources":["/Users/leoterras/Desktop/ApiMaven/ApiMaven-FrontEnd/src/app/services/order.service.ts"],"sourcesContent":["import { AuthService } from 'src/app/services/auth.service';\nimport { Injectable } from '@angular/core';\nimport { Order } from '../models/order.model';\nimport { API_URL } from 'src/environment/environment';\nimport { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';\nimport { BehaviorSubject, Observable, catchError, map, of } from 'rxjs';\nimport { Role } from '../models/role.model';\nimport { OrderDetail } from '../models/orderDetail.model';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  private usersOrdersSubject: BehaviorSubject<any> = new BehaviorSubject<any>([]);\n  public usersOrders$: Observable<any> = this.usersOrdersSubject.asObservable();\n  private usersOrderSubject: BehaviorSubject<any> = new BehaviorSubject<any>([]);\n  public usersOrder$: Observable<any> = this.usersOrderSubject.asObservable();\n  user_id: number;\n  user_token: string;\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {\n    this.user_id = JSON.parse(localStorage.getItem('user') as string).id;\n    this.user_token = this.authService.getToken() as string;\n  }\n\n  getOrders(): any {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n    return this.http.get(`${API_URL}/users/${this.user_id}`, { headers }).subscribe(\n      (data: any) => {\n        const user_orders: Order[] = [];\n\n        data.orders.forEach((order: any) => {\n          user_orders.push(order);\n        })\n\n        this.setUsersOrders(user_orders);\n\n        return user_orders; // Vous pouvez ajuster cela en fonction de votre logique\n      },\n      (error: any) => {\n        console.error('Erreur lors de la récupération des commandes :', error);\n        return of([]); // Renvoie un tableau vide en cas d'erreur\n      }\n    );\n  }\n\n  setUsersOrders(value: any): void {\n    this.usersOrdersSubject.next(value);\n  }\n\n  getOrder(id: number): any {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n    return this.http.get(`${API_URL}/users/${this.user_id}/orders/${id}`, { headers }).subscribe(\n      (data: any) => {\n        console.log(data);\n        const user_order: Order = data;\n\n        this.setUsersOrder(user_order);\n\n        return user_order; // Vous pouvez ajuster cela en fonction de votre logique\n      },\n      (error: any) => {\n        console.error('Erreur lors de la sélection de la commande :', error);\n        return of(null); // Renvoie null en cas d'erreur\n      }\n    )\n  }\n\n  setUsersOrder(value: any): void {\n    this.usersOrderSubject.next(value);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}