{"ast":null,"code":"import { API_URL } from 'src/environment/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, catchError, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/services/auth.service\";\nexport class OrderService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.userOrdersSubject = new BehaviorSubject(false);\n    this.userOrders$ = this.userOrdersSubject.asObservable();\n    this.user_orders = [];\n    this.user_id = JSON.parse(localStorage.getItem('user')).id;\n    this.user_token = this.authService.getToken();\n  }\n  getOrderÉ() {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n    return this.http.get(API_URL + '/users', {\n      headers\n    }).subscribe(data => {\n      console.log(data);\n      this.sendOrder(data);\n    });\n  }\n  sendOrder(data) {\n    this.productsSubject.next(data);\n  }\n  getOrders() {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n    return this.http.get(`${API_URL}/users/${this.user_id}`, {\n      headers\n    }).pipe(map(data => {\n      data.orders.forEach(order => {\n        this.user_orders.push(order);\n      });\n      return this.user_orders; // Vous pouvez ajuster cela en fonction de votre logique\n    }), catchError(error => {\n      console.error('Erreur lors de la récupération des commandes :', error);\n      return of([]); // Renvoie un tableau vide en cas d'erreur\n    }));\n  }\n  static #_ = this.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,OAAO,QAAQ,6BAA6B;AACrD,SAAqBC,WAAW,QAA0B,sBAAsB;AAChF,SAASC,eAAe,EAAcC,UAAU,EAAEC,GAAG,EAAEC,EAAE,QAAQ,MAAM;;;;AAQvE,OAAM,MAAOC,YAAY;EAQvBC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,SAAI,GAAJD,IAAI;IACJ,gBAAW,GAAXC,WAAW;IATb,sBAAiB,GAAyB,IAAIP,eAAe,CAAM,KAAK,CAAC;IAC1E,gBAAW,GAAoB,IAAI,CAACQ,iBAAiB,CAACC,YAAY,EAAE;IAG3E,gBAAW,GAAY,EAAE;IAOvB,IAAI,CAACC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAW,CAAC,CAACC,EAAE;IACpE,IAAI,CAACC,UAAU,GAAG,IAAI,CAACT,WAAW,CAACU,QAAQ,EAAY;EACzD;EAEAC,SAAS;IACP,MAAMC,OAAO,GAAG,IAAIpB,WAAW,EAAE,CAACqB,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACJ,UAAU,EAAE,CAAC;IACnF,OAAO,IAAI,CAACV,IAAI,CAACe,GAAG,CAACvB,OAAO,GAAG,QAAQ,EAAE;MAAEqB;IAAO,CAAE,CAAC,CAACG,SAAS,CAAEC,IAAI,IAAI;MACvEC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAI,CAACG,SAAS,CAACH,IAAI,CAAC;IACtB,CAAC,CAAC;EACJ;EAEAG,SAAS,CAACH,IAAS;IACjB,IAAI,CAACI,eAAe,CAACC,IAAI,CAACL,IAAI,CAAC;EACjC;EAEAM,SAAS;IACP,MAAMV,OAAO,GAAG,IAAIpB,WAAW,EAAE,CAACqB,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACJ,UAAU,EAAE,CAAC;IACnF,OAAO,IAAI,CAACV,IAAI,CAACe,GAAG,CAAC,GAAGvB,OAAO,UAAU,IAAI,CAACY,OAAO,EAAE,EAAE;MAAES;IAAO,CAAE,CAAC,CAACW,IAAI,CACxE5B,GAAG,CAAEqB,IAAS,IAAI;MAChBA,IAAI,CAACQ,MAAM,CAACC,OAAO,CAAEC,KAAU,IAAI;QACjC,IAAI,CAACC,WAAW,CAACC,IAAI,CAACF,KAAK,CAAC;MAC9B,CAAC,CAAC;MAEF,OAAO,IAAI,CAACC,WAAW,CAAC,CAAC;IAC3B,CAAC,CAAC,EACFjC,UAAU,CAAEmC,KAAU,IAAI;MACxBZ,OAAO,CAACY,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;MACtE,OAAOjC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CACH;EACH;EAAC;qBA3CUC,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAiC,SAAZjC,YAAY;IAAAkC,YAFX;EAAM","names":["API_URL","HttpHeaders","BehaviorSubject","catchError","map","of","OrderService","constructor","http","authService","userOrdersSubject","asObservable","user_id","JSON","parse","localStorage","getItem","id","user_token","getToken","getOrderÉ","headers","set","get","subscribe","data","console","log","sendOrder","productsSubject","next","getOrders","pipe","orders","forEach","order","user_orders","push","error","factory","providedIn"],"sourceRoot":"","sources":["/Users/leoterras/Desktop/ApiMaven/ApiMaven-FrontEnd/src/app/services/order.service.ts"],"sourcesContent":["import { AuthService } from 'src/app/services/auth.service';\nimport { Injectable } from '@angular/core';\nimport { Order } from '../models/order.model';\nimport { API_URL } from 'src/environment/environment';\nimport { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';\nimport { BehaviorSubject, Observable, catchError, map, of } from 'rxjs';\nimport { Role } from '../models/role.model';\nimport { OrderDetail } from '../models/orderDetail.model';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  private userOrdersSubject: BehaviorSubject<any> = new BehaviorSubject<any>(false);\n  public userOrders$: Observable<any> = this.userOrdersSubject.asObservable();\n  user_id: number;\n  user_token: string;\n  user_orders: Order[] = [];\n  productsSubject: any;\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {\n    this.user_id = JSON.parse(localStorage.getItem('user') as string).id;\n    this.user_token = this.authService.getToken() as string;\n  }\n\n  getOrderÉ(): any {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n    return this.http.get(API_URL + '/users', { headers }).subscribe((data) => {\n      console.log(data);\n      this.sendOrder(data);\n    });\n  }\n\n  sendOrder(data: any) {\n    this.productsSubject.next(data);\n  }\n\n  getOrders(): Observable<Order[]> {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n    return this.http.get(`${API_URL}/users/${this.user_id}`, { headers }).pipe(\n      map((data: any) => {\n        data.orders.forEach((order: any) => {\n          this.user_orders.push(order);\n        })\n\n        return this.user_orders; // Vous pouvez ajuster cela en fonction de votre logique\n      }),\n      catchError((error: any) => {\n        console.error('Erreur lors de la récupération des commandes :', error);\n        return of([]); // Renvoie un tableau vide en cas d'erreur\n      })\n    );\n  }\n\n  // getOrders(): Order[] {\n  //   console.log(this.user_id);\n  //   const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n  //   this.http.get(`${API_URL}/users/${this.user_id}`, { headers }).subscribe(\n  //     (data: any) => {\n  //       console.log(data);\n\n  //       this.user_orders.push(new Order(\n  //         data.id,\n  //         data.price,\n  //         data.status,\n  //         data.orderDetails\n  //       ));\n  //     }\n  //   )\n\n  //   console.log(this.user_orders);\n\n  //   return this.user_orders;\n  // }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}