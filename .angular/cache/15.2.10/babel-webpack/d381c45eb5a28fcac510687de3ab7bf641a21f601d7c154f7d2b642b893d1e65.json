{"ast":null,"code":"import { API_URL } from 'src/environment/environment';\nimport { BehaviorSubject, catchError, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n  }\n  setLoggedIn(value) {\n    this.isLoggedInSubject.next(value);\n  }\n  signup(username, email, password) {\n    return this.http.post(API_URL + '/auth/signup', {\n      username,\n      email,\n      password\n    }).pipe(tap(data => {\n      this.login(data.username, data.password);\n    }), catchError(this.handleError));\n  }\n  login(username, password) {\n    console.log(\"login\");\n    return this.http.post(`${API_URL}/auth/signin`, {\n      username,\n      password\n    }).pipe(tap(data => {\n      console.log(data);\n      this.setToken(data.accessToken);\n      this.setLoggedIn(true);\n    }), catchError(this.handleError));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.setLoggedIn(false);\n  }\n  loggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n    this.router.navigate(['/']);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  handleError(error) {\n    if (error.status === 401) {\n      // Gérer l'erreur 401 (non autorisé)\n      console.error('Erreur 401 : Accès non autorisé');\n      // Vous pouvez rediriger l'utilisateur vers la page de connexion ou effectuer d'autres actions ici\n    } else {\n      // Gérer d'autres erreurs\n      console.error('Erreur non gérée :', error);\n    }\n    // Renvoie une observable avec un message d'erreur convivial\n    return throwError(() => new Error('Une erreur s\\'est produite. Veuillez réessayer plus tard.'));\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,6BAA6B;AAErD,SAASC,eAAe,EAAcC,UAAU,EAAEC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;;AAK/E,OAAM,MAAOC,WAAW;EAItBC,YACUC,IAAgB,EAChBC,MAAc;IADd,SAAI,GAAJD,IAAI;IACJ,WAAM,GAANC,MAAM;IALR,sBAAiB,GAA6B,IAAIP,eAAe,CAAU,KAAK,CAAC;IAClF,gBAAW,GAAwB,IAAI,CAACQ,iBAAiB,CAACC,YAAY,EAAE;EAK3E;EAEJC,WAAW,CAACC,KAAc;IACxB,IAAI,CAACH,iBAAiB,CAACI,IAAI,CAACD,KAAK,CAAC;EACpC;EAEAE,MAAM,CAACC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB;IACtD,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAClB,OAAO,GAAG,cAAc,EAAE;MAAEe,QAAQ;MAAEC,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACE,IAAI,CACjFhB,GAAG,CAAEiB,IAAS,IAAI;MAChB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACL,QAAQ,EAAEK,IAAI,CAACH,QAAQ,CAAC;IAC1C,CAAC,CAAC,EACFf,UAAU,CAAC,IAAI,CAACoB,WAAW,CAAC,CAC7B;EACH;EAEAD,KAAK,CAACN,QAAgB,EAAEE,QAAgB;IACtCM,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB,OAAO,IAAI,CAACjB,IAAI,CAACW,IAAI,CAAC,GAAGlB,OAAO,cAAc,EAAE;MAAEe,QAAQ;MAAEE;IAAQ,CAAE,CAAC,CAACE,IAAI,CAC1EhB,GAAG,CAAEiB,IAAS,IAAI;MAChBG,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;MACjB,IAAI,CAACK,QAAQ,CAACL,IAAI,CAACM,WAAW,CAAC;MAC/B,IAAI,CAACf,WAAW,CAAC,IAAI,CAAC;IACxB,CAAC,CAAC,EACFT,UAAU,CAAC,IAAI,CAACoB,WAAW,CAAC,CAC7B;EACH;EAEAK,MAAM;IACJC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAAClB,WAAW,CAAC,KAAK,CAAC;EACzB;EAEAmB,QAAQ;IACN,OAAO,CAAC,CAACF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAN,QAAQ,CAACO,KAAa;IACpBJ,YAAY,CAACK,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;IACpC,IAAI,CAACxB,MAAM,CAAC0B,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC7B;EAEAC,QAAQ;IACN,OAAOP,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;EAEQT,WAAW,CAACc,KAAwB;IAC1C,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;MACxB;MACAd,OAAO,CAACa,KAAK,CAAC,iCAAiC,CAAC;MAChD;KACD,MAAM;MACL;MACAb,OAAO,CAACa,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;;IAG5C;IACA,OAAOhC,UAAU,CAAC,MAAM,IAAIkC,KAAK,CAAC,2DAA2D,CAAC,CAAC;EACjG;EAAC;qBAhEUjC,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAkC,SAAXlC,WAAW;IAAAmC,YAFV;EAAM","names":["API_URL","BehaviorSubject","catchError","tap","throwError","AuthService","constructor","http","router","isLoggedInSubject","asObservable","setLoggedIn","value","next","signup","username","email","password","post","pipe","data","login","handleError","console","log","setToken","accessToken","logout","localStorage","removeItem","loggedIn","getItem","token","setItem","navigate","getToken","error","status","Error","factory","providedIn"],"sourceRoot":"","sources":["/Users/leoterras/Desktop/ApiMaven/ApiMaven-FrontEnd/src/app/services/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { API_URL } from 'src/environment/environment';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable, catchError, tap, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isLoggedInSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public isLoggedIn$: Observable<boolean> = this.isLoggedInSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) { }\n\n  setLoggedIn(value: boolean): void {\n    this.isLoggedInSubject.next(value);\n  }\n\n  signup(username: string, email: string, password: string): Observable<any> {\n    return this.http.post(API_URL + '/auth/signup', { username, email, password }).pipe(\n      tap((data: any) => {\n        this.login(data.username, data.password);\n      }),\n      catchError(this.handleError)\n    )\n  }\n\n  login(username: string, password: string): Observable<any> {\n    console.log(\"login\");\n    return this.http.post(`${API_URL}/auth/signin`, { username, password }).pipe(\n      tap((data: any) => {\n        console.log(data);\n        this.setToken(data.accessToken);\n        this.setLoggedIn(true);\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.setLoggedIn(false);\n  }\n\n  loggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  setToken(token: string): void {\n    localStorage.setItem('token', token);\n    this.router.navigate(['/']);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    if (error.status === 401) {\n      // Gérer l'erreur 401 (non autorisé)\n      console.error('Erreur 401 : Accès non autorisé');\n      // Vous pouvez rediriger l'utilisateur vers la page de connexion ou effectuer d'autres actions ici\n    } else {\n      // Gérer d'autres erreurs\n      console.error('Erreur non gérée :', error);\n    }\n\n    // Renvoie une observable avec un message d'erreur convivial\n    return throwError(() => new Error('Une erreur s\\'est produite. Veuillez réessayer plus tard.'));\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}