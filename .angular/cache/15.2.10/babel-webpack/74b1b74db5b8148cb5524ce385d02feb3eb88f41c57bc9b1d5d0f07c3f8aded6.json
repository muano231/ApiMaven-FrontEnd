{"ast":null,"code":"import { Order } from '../models/order.model';\nimport { API_URL } from 'src/environment/environment';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/services/auth.service\";\nexport class OrderService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.user_orders = [];\n    this.user_id = JSON.parse(localStorage.getItem('user')).id;\n    this.user_token = this.authService.getToken();\n  }\n  getOrders() {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n    console.log(`${API_URL}/users/${this.user_id}`);\n    return this.http.get(`${API_URL}/users/${this.user_id}`, {\n      headers\n    }).pipe(map(data => {\n      console.log(\"passe\");\n      console.log(data);\n      const newOrder = new Order(data.id, data.price, data.status, data.orderDetails);\n      this.user_orders.push(newOrder);\n      return this.user_orders; // Vous pouvez ajuster cela en fonction de votre logique\n    }), catchError(error => {\n      console.error('Erreur lors de la récupération des commandes :', error);\n      return of([]); // Renvoie un tableau vide en cas d'erreur\n    }));\n  }\n  static #_ = this.ɵfac = function OrderService_Factory(t) {\n    return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OrderService,\n    factory: OrderService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,KAAK,QAAQ,uBAAuB;AAC7C,SAASC,OAAO,QAAQ,6BAA6B;AACrD,SAAqBC,WAAW,QAA0B,sBAAsB;AAChF,SAAqBC,UAAU,EAAEC,GAAG,EAAEC,EAAE,QAAQ,MAAM;;;;AAKtD,OAAM,MAAOC,YAAY;EAKvBC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,SAAI,GAAJD,IAAI;IACJ,gBAAW,GAAXC,WAAW;IAJrB,gBAAW,GAAY,EAAE;IAMvB,IAAI,CAACC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAW,CAAC,CAACC,EAAE;IACpE,IAAI,CAACC,UAAU,GAAG,IAAI,CAACP,WAAW,CAACQ,QAAQ,EAAY;EACzD;EAEAC,SAAS;IACP,MAAMC,OAAO,GAAG,IAAIjB,WAAW,EAAE,CAACkB,GAAG,CAAC,eAAe,EAAE,UAAU,IAAI,CAACJ,UAAU,EAAE,CAAC;IACnFK,OAAO,CAACC,GAAG,CAAC,GAAGrB,OAAO,UAAU,IAAI,CAACS,OAAO,EAAE,CAAC;IAC/C,OAAO,IAAI,CAACF,IAAI,CAACe,GAAG,CAAC,GAAGtB,OAAO,UAAU,IAAI,CAACS,OAAO,EAAE,EAAE;MAAES;IAAO,CAAE,CAAC,CAACK,IAAI,CACxEpB,GAAG,CAAEqB,IAAS,IAAI;MAChBJ,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MAEpBD,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;MAEjB,MAAMC,QAAQ,GAAG,IAAI1B,KAAK,CACxByB,IAAI,CAACV,EAAE,EACPU,IAAI,CAACE,KAAK,EACVF,IAAI,CAACG,MAAM,EACXH,IAAI,CAACI,YAAY,CAClB;MAED,IAAI,CAACC,WAAW,CAACC,IAAI,CAACL,QAAQ,CAAC;MAE/B,OAAO,IAAI,CAACI,WAAW,CAAC,CAAC;IAC3B,CAAC,CAAC,EACF3B,UAAU,CAAE6B,KAAU,IAAI;MACxBX,OAAO,CAACW,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;MACtE,OAAO3B,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CACH;EACH;EAAC;qBAtCUC,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAA2B,SAAZ3B,YAAY;IAAA4B,YAFX;EAAM","names":["Order","API_URL","HttpHeaders","catchError","map","of","OrderService","constructor","http","authService","user_id","JSON","parse","localStorage","getItem","id","user_token","getToken","getOrders","headers","set","console","log","get","pipe","data","newOrder","price","status","orderDetails","user_orders","push","error","factory","providedIn"],"sourceRoot":"","sources":["/Users/leoterras/Desktop/ApiMaven/ApiMaven-FrontEnd/src/app/services/order.service.ts"],"sourcesContent":["import { AuthService } from 'src/app/services/auth.service';\nimport { Injectable } from '@angular/core';\nimport { Order } from '../models/order.model';\nimport { API_URL } from 'src/environment/environment';\nimport { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';\nimport { Observable, catchError, map, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  user_id: number;\n  user_token: string;\n  user_orders: Order[] = [];\n\n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {\n    this.user_id = JSON.parse(localStorage.getItem('user') as string).id;\n    this.user_token = this.authService.getToken() as string;\n  }\n\n  getOrders(): Observable<Order[]> {\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n    console.log(`${API_URL}/users/${this.user_id}`);\n    return this.http.get(`${API_URL}/users/${this.user_id}`, { headers }).pipe(\n      map((data: any) => {\n        console.log(\"passe\");\n\n        console.log(data);\n\n        const newOrder = new Order(\n          data.id,\n          data.price,\n          data.status,\n          data.orderDetails\n        );\n\n        this.user_orders.push(newOrder);\n\n        return this.user_orders; // Vous pouvez ajuster cela en fonction de votre logique\n      }),\n      catchError((error: any) => {\n        console.error('Erreur lors de la récupération des commandes :', error);\n        return of([]); // Renvoie un tableau vide en cas d'erreur\n      })\n    );\n  }\n\n  // getOrders(): Order[] {\n  //   console.log(this.user_id);\n  //   const headers = new HttpHeaders().set('Authorization', `Bearer ${this.user_token}`);\n  //   this.http.get(`${API_URL}/users/${this.user_id}`, { headers }).subscribe(\n  //     (data: any) => {\n  //       console.log(data);\n\n  //       this.user_orders.push(new Order(\n  //         data.id,\n  //         data.price,\n  //         data.status,\n  //         data.orderDetails\n  //       ));\n  //     }\n  //   )\n\n  //   console.log(this.user_orders);\n\n  //   return this.user_orders;\n  // }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}