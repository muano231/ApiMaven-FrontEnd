{"ast":null,"code":"import { API_URL } from 'src/environment/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.isLoggedInSubject = new BehaviorSubject(false);\n    this.isLoggedIn$ = this.isLoggedInSubject.asObservable();\n  }\n  setLoggedIn(value) {\n    this.isLoggedInSubject.next(value);\n  }\n  signup(username, email, password) {\n    return this.http.post(API_URL + '/auth/signup', {\n      username,\n      email,\n      password\n    }).subscribe(data => {\n      console.log(data);\n      this.setLoggedIn(true);\n      this.router.navigate(['/signin']);\n    });\n  }\n  login(username, password) {\n    return this.http.post(`${API_URL}/auth/signin`, {\n      username,\n      password\n    }).subscribe(data => {\n      console.log(data);\n      this.setToken(data.accessToken);\n      this.setLoggedIn(true);\n      this.router.navigate(['/']);\n    }, error => {\n      console.log(error);\n      this.setLoggedIn(false);\n    });\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this.setLoggedIn(false);\n    this.router.navigate(['/signin']);\n  }\n  loggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,6BAA6B;AAErD,SAASC,eAAe,QAAiD,MAAM;;;;AAK/E,OAAM,MAAOC,WAAW;EAItBC,YACUC,IAAgB,EAChBC,MAAc;IADd,SAAI,GAAJD,IAAI;IACJ,WAAM,GAANC,MAAM;IALR,sBAAiB,GAA6B,IAAIJ,eAAe,CAAU,KAAK,CAAC;IAClF,gBAAW,GAAwB,IAAI,CAACK,iBAAiB,CAACC,YAAY,EAAE;EAK3E;EAEJC,WAAW,CAACC,KAAc;IACxB,IAAI,CAACH,iBAAiB,CAACI,IAAI,CAACD,KAAK,CAAC;EACpC;EAEAE,MAAM,CAACC,QAAgB,EAAEC,KAAa,EAAEC,QAAgB;IACtD,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAACf,OAAO,GAAG,cAAc,EAAE;MAAEY,QAAQ;MAAEC,KAAK;MAAEC;IAAQ,CAAE,CAAC,CAACE,SAAS,CACrFC,IAAS,IAAI;MACZC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAI,CAACT,WAAW,CAAC,IAAI,CAAC;MACtB,IAAI,CAACH,MAAM,CAACe,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;IACnC,CAAC,CACF;EACH;EAEAC,KAAK,CAACT,QAAgB,EAAEE,QAAgB;IACtC,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAC,GAAGf,OAAO,cAAc,EAAE;MAAEY,QAAQ;MAAEE;IAAQ,CAAE,CAAC,CAACE,SAAS,CAC9EC,IAAS,IAAI;MACZC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAI,CAACK,QAAQ,CAACL,IAAI,CAACM,WAAW,CAAC;MAC/B,IAAI,CAACf,WAAW,CAAC,IAAI,CAAC;MACtB,IAAI,CAACH,MAAM,CAACe,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC,EACAI,KAAK,IAAI;MACRN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC;MAClB,IAAI,CAAChB,WAAW,CAAC,KAAK,CAAC;IACzB,CAAC,CACF;EACH;EAEAiB,MAAM;IACJC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACnB,WAAW,CAAC,KAAK,CAAC;IACvB,IAAI,CAACH,MAAM,CAACe,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;EACnC;EAEAQ,QAAQ;IACN,OAAO,CAAC,CAACF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACxC;EAEAP,QAAQ,CAACQ,KAAa;IACpBJ,YAAY,CAACK,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;EACtC;EAEAE,QAAQ;IACN,OAAON,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;EAAC;qBAtDU3B,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAA+B,SAAX/B,WAAW;IAAAgC,YAFV;EAAM","names":["API_URL","BehaviorSubject","AuthService","constructor","http","router","isLoggedInSubject","asObservable","setLoggedIn","value","next","signup","username","email","password","post","subscribe","data","console","log","navigate","login","setToken","accessToken","error","logout","localStorage","removeItem","loggedIn","getItem","token","setItem","getToken","factory","providedIn"],"sourceRoot":"","sources":["/Users/leoterras/Desktop/ApiMaven/ApiMaven-FrontEnd/src/app/services/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { API_URL } from 'src/environment/environment';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject, Observable, catchError, tap, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private isLoggedInSubject: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public isLoggedIn$: Observable<boolean> = this.isLoggedInSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) { }\n\n  setLoggedIn(value: boolean): void {\n    this.isLoggedInSubject.next(value);\n  }\n\n  signup(username: string, email: string, password: string): any {\n    return this.http.post(API_URL + '/auth/signup', { username, email, password }).subscribe(\n      (data: any) => {\n        console.log(data);\n        this.setLoggedIn(true);\n        this.router.navigate(['/signin']);\n      }\n    )\n  }\n\n  login(username: string, password: string): any {\n    return this.http.post(`${API_URL}/auth/signin`, { username, password }).subscribe(\n      (data: any) => {\n        console.log(data);\n        this.setToken(data.accessToken);\n        this.setLoggedIn(true);\n        this.router.navigate(['/']);\n      },\n      (error) => {\n        console.log(error);\n        this.setLoggedIn(false);\n      }\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.setLoggedIn(false);\n    this.router.navigate(['/signin']);\n  }\n\n  loggedIn(): boolean {\n    return !!localStorage.getItem('token');\n  }\n\n  setToken(token: string): void {\n    localStorage.setItem('token', token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}